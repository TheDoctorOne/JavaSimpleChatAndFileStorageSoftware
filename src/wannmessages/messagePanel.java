/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wannmessages;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author DoctorOne
 */
public class messagePanel extends javax.swing.JPanel implements ActionListener{

	/**
	 * Creates new form messagePanel
	 */
	private connection con;
	private String loginedUsername;
	private Timer timer = new Timer(100,this);
	private String before = "before" , now = "now";
	private int time=0;
	public boolean cikis=false;
	private String upload_filename;
	private JFrame ucf = new JFrame("Upload Center");
	private UploadCenterPanel ucp;
	public messagePanel(connection con,String loginedUsername) {
		this.con = con;
		cikis = false;
		this.loginedUsername = loginedUsername;
		initComponents();
		ucf.setLocationRelativeTo(null);
		ucp = new UploadCenterPanel(this);
		con.getPanel(this);
		checkState();
		con.stateUpdate(this.loginedUsername,1,false);
		con.stateUpdate(loginedUsername, 0, true);
		checkMe();
		
		ResultSet rs = con.getTable();
		
		try {
			rs.first();
			do{
				if(rs.getString("user").equals(this.loginedUsername)){
					me_textarea.setText(rs.getString("message"));
					
				} else {
					he_textarea.setText(rs.getString("message"));
				}
			}while(rs.next());
		} catch (SQLException ex) {
			Logger.getLogger(messagePanel.class.getName()).log(Level.SEVERE, null, ex);
		}
		
		if(this.loginedUsername.equals("DoctorOne")){
			he_label.setText("       Burak");
		} else
			he_label.setText("DoctorOne");
		timer.start();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        he_textarea = new javax.swing.JTextArea();
        he_label = new javax.swing.JLabel();
        me_label = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        me_textarea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        send_textarea = new javax.swing.JTextArea();
        send_ = new javax.swing.JButton();
        burak = new javax.swing.JCheckBox();
        doctorone = new javax.swing.JCheckBox();
        error = new javax.swing.JLabel();
        check_ = new javax.swing.JButton();
        upload_ = new javax.swing.JButton();
        del_ = new javax.swing.JButton();
        download_ = new javax.swing.JButton();
        filename = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        writingLabel = new javax.swing.JLabel();

        setBackground(java.awt.Color.darkGray);
        setForeground(java.awt.Color.white);

        he_textarea.setBackground(new java.awt.Color(51, 51, 51));
        he_textarea.setColumns(20);
        he_textarea.setForeground(new java.awt.Color(255, 255, 255));
        he_textarea.setRows(5);
        jScrollPane1.setViewportView(he_textarea);

        he_label.setBackground(java.awt.Color.darkGray);
        he_label.setForeground(new java.awt.Color(255, 255, 255));
        he_label.setText("Opponent");

        me_label.setBackground(java.awt.Color.darkGray);
        me_label.setForeground(new java.awt.Color(255, 255, 255));
        me_label.setText("You");

        me_textarea.setEditable(false);
        me_textarea.setBackground(new java.awt.Color(51, 51, 51));
        me_textarea.setColumns(20);
        me_textarea.setForeground(new java.awt.Color(255, 255, 255));
        me_textarea.setRows(5);
        jScrollPane2.setViewportView(me_textarea);

        send_textarea.setBackground(new java.awt.Color(51, 51, 51));
        send_textarea.setColumns(20);
        send_textarea.setForeground(new java.awt.Color(255, 255, 255));
        send_textarea.setRows(5);
        send_textarea.setCaretColor(new java.awt.Color(255, 255, 255));
        send_textarea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        send_textarea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                send_textareaKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(send_textarea);

        send_.setText("Send");
        send_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send_ActionPerformed(evt);
            }
        });

        burak.setBackground(java.awt.Color.darkGray);
        burak.setForeground(java.awt.Color.white);
        burak.setText("Burak");
        burak.setEnabled(false);
        burak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                burakActionPerformed(evt);
            }
        });

        doctorone.setBackground(java.awt.Color.darkGray);
        doctorone.setForeground(new java.awt.Color(255, 255, 255));
        doctorone.setText("DoctorOne");
        doctorone.setEnabled(false);

        error.setForeground(new java.awt.Color(102, 204, 0));
        error.setText("No Error");

        check_.setText("Check");
        check_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_ActionPerformed(evt);
            }
        });

        upload_.setText("UPLOAD");
        upload_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upload_ActionPerformed(evt);
            }
        });

        del_.setText("DEL");
        del_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                del_ActionPerformed(evt);
            }
        });

        download_.setText("DOWNLOAD");
        download_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                download_ActionPerformed(evt);
            }
        });

        filename.setBackground(java.awt.Color.darkGray);
        filename.setForeground(new java.awt.Color(255, 255, 255));
        filename.setText("Nothing Uploaded");
        filename.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jButton1.setText("UPLOAD CENTER");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("UPDATE VERSION");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        writingLabel.setBackground(java.awt.Color.darkGray);
        writingLabel.setForeground(new java.awt.Color(255, 255, 0));
        writingLabel.setText("                                      ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(writingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(he_label, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(doctorone)
                                    .addComponent(burak, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(check_)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(me_label, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(filename, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(download_)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(upload_)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(del_, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(send_, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(error, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(me_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(he_label)
                            .addComponent(writingLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(burak, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(doctorone)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(check_)))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(error, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(filename, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(del_)
                            .addComponent(download_)
                            .addComponent(upload_))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(send_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void burakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_burakActionPerformed
        // TODO add your handling code here:
		
    }//GEN-LAST:event_burakActionPerformed
	public void send(){
		if(con.sendMessage(loginedUsername,send_textarea.getText())){
			me_textarea.setText(send_textarea.getText());
			before = send_textarea.getText();
			send_textarea.setText("");
			error.setText("Sent");
			error.setForeground(new java.awt.Color(102, 204, 0));
		}else{
			
			
		}
	}
    private void send_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send_ActionPerformed
        // TODO add your handling code here:
		if(!send_textarea.getText().trim().equals(""))
		send();
		
		
    }//GEN-LAST:event_send_ActionPerformed

	private boolean write = false;
	private int getTime =0;
    private void send_textareaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_send_textareaKeyPressed
        if(getTime == 0){ write=true; }
		
		
		if(send_textarea.getText().trim().equals("") || send_textarea.getText().equals(before)){
		if(evt.getKeyCode() == KeyEvent.VK_UP){
			now = send_textarea.getText();
			send_textarea.setText(before);
		}
		if(evt.getKeyCode() == KeyEvent.VK_DOWN){
			send_textarea.setText(now);
		}
		}
		if(!send_textarea.getText().trim().equals(""))
		if(evt.getKeyCode() == KeyEvent.VK_F1){
			send();
		}
		if((time - getTime) / 5000 == 0){ 
			getTime=0;
			write = false;
		}
    }//GEN-LAST:event_send_textareaKeyPressed

	public void download(String filename){
		con.downloadFile(filename);
	}
    private void download_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_download_ActionPerformed
        // TODO add your handling code here:
		if(oldFilename != null)
		download(oldFilename);
		error.setText("File downloaded.");
		error.setForeground(new java.awt.Color(102, 204, 0));
    }//GEN-LAST:event_download_ActionPerformed

	public void upload(JPanel panel,int id){
		
		
		JFileChooser jfc = new JFileChooser();
		
		int i = jfc.showDialog(panel,"Seç");
		
		if(i ==	JFileChooser.APPROVE_OPTION){
			
			File upload = jfc.getSelectedFile();
			
			upload_filename = upload.getName();
			
			con.uploadFile(id, upload_filename, upload);
	    }
		
	}
    private void upload_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upload_ActionPerformed
        // TODO add your handling code here:
		upload(this,-1);
    }//GEN-LAST:event_upload_ActionPerformed
	private void setFrameUploadCenter(UploadCenterPanel ucp){
		
		ucf.setMaximumSize(new Dimension(360, 670));
		ucf.setMinimumSize(new Dimension(360, 400));
		ucp.setMaximumSize(new Dimension(360, 670));
		ucp.setMinimumSize(new Dimension(360, 400));
		ucf.add(ucp);
		ucf.pack();
		
	
	}
	
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
		
		setFrameUploadCenter(ucp);
		ucf.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

	public void delFile(int i){
		con.delFile(i);
	}
    private void del_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_del_ActionPerformed
        // TODO add your handling code here:
		delFile(-1);
    }//GEN-LAST:event_del_ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
		double x = Double.parseDouble(JOptionPane.showInputDialog(this, "LET'S UPGRADE THIS THING!\nENTER THE NEW VERSION"));
		if(x>=connection.VERSION){
			JOptionPane.showMessageDialog(this, "Please select the file.");
			JFileChooser jfc = new JFileChooser();
			error.setText("File Choosing");
			error.setForeground(new java.awt.Color(102, 204, 0));
			int i = jfc.showDialog(this, "Seç");
			
			if(i == JFileChooser.APPROVE_OPTION){
				
				File newVersion = jfc.getSelectedFile();
				
				if(con.updateVersion(newVersion, x)){
					error.setText("Version Updated.");
					error.setForeground(new java.awt.Color(102, 204, 0));
				} else{
					this.setErrorLabel("Update failed.");
				}
			} else{
				error.setText("Update Canceled.");
				error.setForeground(new java.awt.Color(102, 204, 0));
			}
			
			
			
		}else
			JOptionPane.showMessageDialog(this, "Version is not valid.");
		
    }//GEN-LAST:event_jButton2ActionPerformed

    private void check_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_ActionPerformed
        // TODO add your handling code here:
		checkState();
    }//GEN-LAST:event_check_ActionPerformed
	public void checkState(){
		ResultSet rs = con.getTable();
		
		try {
			rs.first();
			do{
				
				if(rs.getString("user").equals("Burak")){
					if(rs.getInt("state") == 1)
					    burak.setSelected(true);
					else if (rs.getInt("state") == 0)
						burak.setSelected(false);
					
				} else if(rs.getString("user").equals("DoctorOne")){
					if(rs.getInt("state") == 1)
					    doctorone.setSelected(true);
					else if (rs.getInt("state") == 0)
						doctorone.setSelected(false);
				}
			}while(rs.next());
		} catch (SQLException ex) {
			Logger.getLogger(messagePanel.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox burak;
    private javax.swing.JButton check_;
    private javax.swing.JButton del_;
    private javax.swing.JCheckBox doctorone;
    private javax.swing.JButton download_;
    private javax.swing.JLabel error;
    private javax.swing.JLabel filename;
    private javax.swing.JLabel he_label;
    private javax.swing.JTextArea he_textarea;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel me_label;
    private javax.swing.JTextArea me_textarea;
    private javax.swing.JButton send_;
    private javax.swing.JTextArea send_textarea;
    private javax.swing.JButton upload_;
    private javax.swing.JLabel writingLabel;
    // End of variables declaration//GEN-END:variables

	public ResultSet getTable(){ //GET WHOLE TABLE
		return con.checkFile();
	}
	public double getSize(String s){
	    return con.checkFile(s);
		}
	
	
	
	//ACTION LISTENER
	
	private String oldFilename;
	private static final DecimalFormat df = new DecimalFormat(".##");
	private ExecutorService executor = Executors.newFixedThreadPool(1);
	//NEW THREAD FOR ACTIONLISTENER
	
	private messagePanel mPanel = this;
	private int thread_timer=0;
	private synchronized void ActionListener(){
		thread_timer++;
		if(mPanel.isVisible()){
		ResultSet rs = con.getTable();
		
		try { //RECEIVE MESSAGE
			rs.first();
			do{
                            if(rs.getString("user").equals(loginedUsername)){
                                if(!me_textarea.getText().equals(rs.getString("message"))){
                                    me_textarea.setText(rs.getString("message"));
                                }
                            } else {
                                if(!he_textarea.getText().equals(rs.getString("message"))){
                                    he_textarea.setText(rs.getString("message"));
                                    Toolkit.getDefaultToolkit().beep();
                                }
				}
			}while(rs.next());
		} catch (SQLException ex) {
			Logger.getLogger(messagePanel.class.getName()).log(Level.SEVERE, null, ex);
		}
		
		
		 //WRITING OR NOT
		if(con.getWriting(loginedUsername)){
			writingLabel.setText("Writing...");
		} else {
			writingLabel.setText(" ");
		}
		//UPDATE WRITE STATUS
		if(!send_textarea.getText().trim().equals(""))
		    con.updateWriting(loginedUsername, 1);
		else
			con.updateWriting(loginedUsername, 0);
		
		
		//FILE SIZE CHECK
		
		if(con.checkFile(-1) == null){
			filename.setText("Nothing uploaded.");
		} else{
			String s;
			oldFilename = filename.getText();
			s = con.checkFile(-1);
		if(!oldFilename.equals(s)){
			oldFilename = s;
			double fileSize = con.checkFile(s);
			if(fileSize >900000){
			fileSize /= 1000000;
			filename.setText(s + "(" + df.format(fileSize) + "MB)");}
			else if(fileSize >900){
			fileSize /= 1000;
			filename.setText(s + "(" + df.format(fileSize) + "KB)");}
			else {
			filename.setText(s + "(" + df.format(fileSize) + "B)");
			}
		}
		}
		
		//OFFLINE & ONLINE STATUS
		con.stateUpdate(loginedUsername, 1, false);
		if(thread_timer % 9 == 0) checkState();
		if(thread_timer % 5 == 0){
			con.stateUpdate(loginedUsername, 0, true);		    
		}
			
		try {
			Thread.sleep(10);
		} catch (InterruptedException ex) {
			Logger.getLogger(messagePanel.class.getName()).log(Level.SEVERE, null, ex);
		}
		
	}	
		
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		
		
		executor.submit(new Thread(this::ActionListener));
		time++;
		
		
	}
	
	public void setExecutor(){
		executor.shutdown();
	}
	
	public void stopTimer(){
		timer.stop();
		cikis = true;
	}

	public void setErrorLabel(String s){
		error.setText(s);
		error.setForeground(Color.red);
	}
	
	public void checkMe (){
		if(loginedUsername.equals("Burak"))
			burak.setSelected(true);
		else
			doctorone.setSelected(true);
		
	}
}
